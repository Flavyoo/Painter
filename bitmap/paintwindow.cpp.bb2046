using namespace std;

#include "paintwindow.h"
#include <QFileDialog>
#include <QColorDialog>
#include <QDir>
#include <QInputDialog>
#include <QMessageBox>
#include <QAction>
#include <QMenuBar>
#include <QMenu>
#include <QImageWriter>
#include <QIcon>
#include <QMenuBar>
#include <QToolButton>
#include <QToolBar>

PaintWindow::PaintWindow(QWidget* parent, const char*) :QMainWindow(parent)
{
    paintArea = new PaintArea();
    // make the paint area the center of PaintWindow
    setCentralWidget(paintArea);

    createActions();
    createMenus();
    createIconMenuBar();

    setWindowTitle(tr("Painter"));
    resize(500, 500);
}

PaintWindow::~PaintWindow() {
    delete paintArea;
    paintArea = NULL;
}

void PaintWindow::closeEvent(QCloseEvent *event) {

    if (trySave())
        event->accept();
    else
        event->ignore();
}

void PaintWindow::open() {
    if (trySave()) {
        QString fileName = QFileDialog::getOpenFileName(this, tr("Open File"), QDir::currentPath());

        // file with this name was found
        if (!fileName.isEmpty())
            paintArea->loadImage(fileName);
    }
}
void PaintWindow::save() {
    // call when users choose Save as from menu
    QAction *action = qobject_cast<QAction *>(sender());
    // choose format from format menu
    QByteArray fileFormat = action->data().toByteArray();
    saveDrawing(fileFormat);
}

void PaintWindow::penColor() {
    PaintPen* pen = paintArea->getPen();
    QColor color = pen->getPenColor();
    // grab a new color from the color dialog
    QColor newColor = QColorDialog::getColor(color, this, "Choose A new Color");
    if (newColor.isValid())
        pen->setPenColor(newColor);

}

void PaintWindow::penWidth() {
    /*PaintPen* pen = paintArea->getPen();
    int width = pen->getPenWidth();
    // for when user clicks ok
    bool ok;*/
    // get value from the user
    //int newWidth = QInputDialog::getInt(this, tr("Painter"), tr("Choose Pen Width:"), width, 1, 50, 1, &ok);
    //if (ok)
    //   pen->setWidth(newWidth);
    //QWidget* sliderWidget = new QWidget(this);
    //sliderWidget->setFixedSize(200, 80);
    
    //widget->setFixedSize(200, 80);
    slider = new QSlider(paintArea);
    slider->setOrientation(Qt::Horizontal);
    slider->setRange(0, 100);
    slider->setGeometry(10, 40, 180, 10);
    slider->setStyleSheet("QSlider::groove:horizontal {background-color:gray;}"
                          "QSlider::handle:horizontal {background-color:blue; height:16px; width:8px}");
    slider->show();
    //widget.show();
    connect(slider, SIGNAL(valueChanged(int)), this, SLOT(setPenWidth(int)));
    connect(slider, SIGNAL(sliderReleased()), this, SLOT(hideSlider()));
}

void PaintWindow::setPenWidth(int newWidth) {
    PaintPen* pen = paintArea->getPen();
    pen->setWidth(newWidth);
}

void PaintWindow::hideSlider() {
    int i;
    while(i++ < 100000000)
    slider->hide();
}

void PaintWindow::about() {
    QMessageBox::about(this, tr("About Paint"), tr("<p><b>Painter</b> lets you create drawings and release your creativity.</p>"));
}

void PaintWindow::createActions() {
    // actions to represent menu entries and connect to slots
    openAct = new QAction(tr("&Open"), this);
    openAct->setShortcuts(QKeySequence::Open);
    connect(openAct, SIGNAL(triggered()), this, SLOT(open()));

    // get list of supported file formats
    foreach(QByteArray format, QImageWriter::supportedImageFormats()) {
        QString text = tr("%1...").arg(QString(format).toUpper());
        QAction *action = new QAction(text, this);
        action->setData(format);
        connect(action, SIGNAL(triggered()), this, SLOT(save()));
        saveAsActs.append(action);
    }

    printAct = new QAction(tr("&Print"), this);
    connect(printAct, SIGNAL(triggered()), paintArea, SLOT(print()));

    exitAct = new QAction(tr("&Exit"), this);
    exitAct->setShortcuts(QKeySequence::Quit);
    connect(exitAct, SIGNAL(triggered()), this, SLOT(close()));

    penColorAct = new QAction(tr("&Pen Color"), this);
    connect(penColorAct, SIGNAL(triggered()), this, SLOT(penColor()));

    penWidthAct = new QAction(tr("Pen &Width"), this);
    connect(penWidthAct, SIGNAL(triggered()), this, SLOT(penWidth()));

    clearScreenAct = new QAction(tr("&Clear Screen"), this);
    clearScreenAct->setShortcut(tr("Ctrl+L"));
    connect(clearScreenAct, SIGNAL(triggered()), paintArea, SLOT(clearImage()));


    aboutAct = new QAction(tr("&About"), this);
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));


    aboutQtAct = new QAction(tr("About &Qt"), this);
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));
}

void PaintWindow::createMenus() {
    saveAsMenu = new QMenu(tr("&Save As"), this);
    foreach (QAction *action, saveAsActs)
        saveAsMenu->addAction(action);

    fileMenu = new QMenu(tr("&File"), this);
    fileMenu->addAction(openAct);
    fileMenu->addMenu(saveAsMenu);
    fileMenu->addAction(printAct);
    fileMenu->addSeparator();
    fileMenu->addAction(exitAct);

    optionMenu = new QMenu(tr("&Options"), this);
    optionMenu->addAction(penColorAct);
    optionMenu->addAction(penWidthAct);
    optionMenu->addSeparator();
    optionMenu->addAction(clearScreenAct);

    helpMenu = new QMenu(tr("&Help"), this);
    helpMenu->addAction(aboutAct);
    helpMenu->addAction(aboutQtAct);

    menuBar()->addMenu(fileMenu);
    menuBar()->addMenu(optionMenu);
    menuBar()->addMenu(helpMenu);
    menuBar()->addAction(openAct);
}

void PaintWindow::createIconMenuBar() {
    QToolBar* toolbar = new QToolBar("Tool Bar", this);
    QToolButton*
    return;
}

bool PaintWindow::trySave() {
    // check for unsaved changes
    if (paintArea->isChanged()) {
        QMessageBox::StandardButton ret;
        ret = QMessageBox::warning(this, tr("Painter"),
                         tr("Your drawing has been modified.\n"
                            "Would you like to save your changes?"),
                         QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel);
       if (ret == QMessageBox::Save) {
           return saveDrawing("png");
       }
       else if (ret == QMessageBox::Cancel) {
           return false;
       }
    }
    return true;
}

bool PaintWindow::saveDrawing(const QByteArray &fileFormat) {
    QString currentPath = QDir::currentPath() + "/painter." + fileFormat;

    QString fileName = QFileDialog::getSaveFileName(this, tr("Save As"), currentPath,
              tr("%1 Files (*.%2;;All Files (*)").arg(QString::fromLatin1(fileFormat.toUpper()))
                                                  .arg(QString::fromLatin1(fileFormat)));

    if (fileName.isEmpty()) {
        return false;
    } else {
        return paintArea->saveImage(fileName, fileFormat.constData());
    }
}



